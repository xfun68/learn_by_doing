## 业务逻辑简介

**内嵌流水线**是指在普通流水线中的某一节点（step），其所执行的任务的结果为“触发另一条流水线”。触发后需要等待目标流水线执行结束才能返回。

触发动作结束后，当前节点还必须等待目标流水线执行结束才能结束当前节点的执行，此为“同步”的体现之处。

被以同步方式触发的流水线，仍然可以包含自己的“内嵌流水线”节点。

## CDDL相关内容

CDDL中state的type字段新增取值：

* sync_run
* async_run

分别用来标识当前节点是以同步or异步的方式来调用其它流水线。

在environmentVariables中会有以下字段用来指定目标流水线：

* prjName 目标流水线的projectName
* wfdName 目标流水线的pipelineName

## 验收条件

1. 触发方式为**同步**触发，需要等待目标流水线执行结束
1. 如果触发操作为阻塞是操作，而当前节点又设置了超时时间，则当触发操作在超时时间内未完成时，则视为当前节点执行失败（原因：超时未完成）
1. 触发目标流水线成功且目标流水线在超时时间内完成执行，当前节点的outcome为success
1. 触发目标流水线失败时，当前节点的outcome为error
1. 触发动作成功后，进入等待目标流水线执行结束的阶段，如果在当前节点设置的超时时间内，目标流水线的执行仍未结束，则需abort目标流水线，且将当前节点标识为“超时失败”
1. 被同步触发的流水线可以再继续以同步方式触发其他流水线，没有次数的限制
1. 被以同同步方式触发的流水线的job在执行时，需要在其环境变量中提供其父job的job_id、job_name、以及父流水线中触发该流水线的节点的name（具体变量名称我们可以自行定义，最好包含在API doc中）
1. 创建流水线时，不需要对目标流水线是否存在做强制限制，如果有则更好
1. 执行流水线时，如果目标流水线不存在，则按触发失败处理
1. 在对已有流水线进行更新时（通过modifyPipeline），也会有增加“内嵌流水线”节点的情况
1. 在调用abortPipeline或者abortJobs时，需要递归的将其触发的内嵌流水线及被其触发的内嵌流水线触发的内嵌流水线的jobs停掉（如果它们还没有结束的话）。

